[3;J[H[2JList all the shell scripts contents of the directory

 File: arithematic.sh
array.sh
cmdlinevar.sh
comments.sh
devnull.sh
env.sh
exitstatus.sh
forloop.sh
ifelse.sh
if.sh
quotes.sh
readstatement.sh
substitution.sh
test.sh
vardeclaretype.sh
var.sh - Contents #!/bin/bash
# expression evalutions 

echo "addition of 2, 2 is: `expr 2 + 2` "

echo "oder of precedence ex -> expr 2 + 2 \* 4: `expr 2 + 2 \* 4` "

echo "order of precedence ex ->expr \( 2 + 2 \) \* 4: `expr \( 2 + 2 \) \* 4` "

echo "divison of 15 by 4 is : `expr 15 / 4 ` "

echo "reminder of 15 by 4 is : `expr 15 % 4 ` "

echo "multiplication of 2,4 is: `expr 2 \* 4 ` " 
#!/bin/bash
#describes arrays
# simple array list and loop for display
# defining array
echo ""
MyArray=(10 20 30) # space delimited
echo "My Entire array is : ${MyArray[*]} " 
#echo ${MyArray[*]}
echo "Value at index 2 is : ${MyArray[2]} "
echo "Adding new value 40 to array"
MyArray[3]=40
echo "Now My Entire array is : ${MyArray[@]} "
echo ""
echo "If we use commas, in array declaration it will treat it as one item "
MyArray2=("nag","raj","reddy")
echo "Accessing entire array items:${MyArray2[*]}"
echo "Accessing array at 0th index: ${MyArray2[0]}"
echo "Ouside array accesing: ${MyArray2[1]}"
echo ""
echo "Iterate array items"
SERVERLIST=("webserv01" "webserv02" "webserv03" "webserv04")
COUNT=0
for INDEX in ${SERVERLIST[@]}; do
  echo "Processing Server: ${SERVERLIST[COUNT]}"
  COUNT="`expr $COUNT + 1`"
done

#!/bin/bash
# demo of command line values passed in with our shell script 

#echo "The following item was passed in to the script at run time: $1 $2"
USERNAME=$1
PASSWORD=$2
echo "The Username is $USERNAME and Password is $PASSWORD"
#!/bin/bash
# This line is intended to be used as a general description of the script 
# and anything that it does 

clear   # clears the screen 

MYUSERNAME="Nagaraju" # the username for this application

echo "We are using default user called : $MYUSERNAME" # display to the console

DATETIMESTAMP=`date`

echo "This is when the script was run: $DATETIMESTAMP" # this is the timestamp of run 

#!/bin/bash
#redirect output to /dev/null example

echo "This is displaying on the console"
echo "This is going into the block hole" >> /dev/null
#!/bin/bash

clear
echo "This script will give us some environment variables"
echo "==================================================="
echo "Hello Your Username is : $USER"
echo ""
echo "Your Home Directory is : $HOME"
echo ""
echo "Your Shell is : $SHELL"
echo ""
echo "your History File will Ignore : $HISTCONTROL"
echo ""
echo "Hist Size is : $HISTSIZE"
echo ""
echo "Your on this Host : $HOSTNAME"
echo ""
echo "Your Terminal Session Type is : $TERM"
echo ""
echo "========================================================="
#!/bin/bash
#this is to show the exit status types 

set -e  # which tells shell script to exit when there is an error during execution
echo "addition of 1,5 and exit status code is:"
expr 1 + 5
echo $?
echo ""
echo "removing file which is not there, status code is:"
rm doodles.sh # bash file which is not exist 
echo $?
echo ""
echo "addition of 10, 10  and status code is"
expr 10 + 10
echo $?
#!/bin/bash
# this is demo of the for loop
clear

echo "List all the shell scripts contents of the directory"

SHELLSCRIPTS=`ls *.sh`

#echo "Listing is: $SHELLSCRIPTS"

for SCRIPT in "$SHELLSCRIPTS"; do
  DISPLAY="`cat $SCRIPT`"
  echo ""
  echo " File: $SCRIPT - Contents $DISPLAY "
  echo ""
done
#!/bin/bash
# simple example of if then else and nested if statements 


clear
echo "Enter a number between 1 and 3"
read VALUE
#if [ "$VALUE" -eq "1" ] 2>/dev/null || [ "$VALUE" -eq "2" ] 2>/dev/null || [ "$VALUE" -eq "3" ] 2>/dev/null ; then

if [ "$VALUE" -eq "1" ] 2>/dev/null; then 
  echo "You entered #1"
elif [ "$VALUE" -eq "2" ] 2>/dev/null; then
  echo "You entered #2"
elif [ "$VALUE" -eq "3" ] 2>/dev/null; then
  echo "You entered number #3"
else
   echo "You didn't follow the directions, Please enter number b/w 1 and 3"
fi
#!/bin/bash
# simple if script for guessing a number
echo ""

echo "Guess the Secret Number"
echo "========================="
echo ""
echo "Enter a Number Between 1 to 5: "
read GUESS
if [ $GUESS -eq 3 ]
  then 
    echo "Your Guess is correct"
fi

echo ""
# tets for existence of indicated file name

echo ""

#FILENAME="mytext.txt"
FILENAME=$1
echo "Testing for existence of fille called $FILENAME"
if [ ! -a $FILENAME ]
  then 
    echo "File $FILENAME doesn't exist!"
fi

echo ""
# test multiple expressions in single if statement
echo "Testing for file $FILENAME and readability"
if [ -f $FILENAME ] && [ -r $FILENAME ]
  then 
    echo "File $FILENAME exists and is readable"
fi
echo ""
#!/bin/bash

# this script discribes specila charcheters and quotes

echo "date" # print out string enclosed 
echo ""
echo "$DATE" # evaluates the DATE looking for any variable
echo ""
echo "\$DATE" # escaping $ which is responsible for evaluation of env 
echo ""
echo 'DATE' # print out literal 
echo '$DATE' # print out literal it will treat specila charcters as literal itself
echo "today date is:`date`" # substitute a command inside a string using back ticks 


echo "\" "
echo " \\ "
#!/bin/bash
# interactive script for users input

echo "Enter your first name: "
read FIRSTNAME
echo ""
echo "Enter your last name: "
read LASTNAME
echo ""
echo "Enter your age"
read USERAGE
echo "your full name is: $FIRSTNAME $LASTNAME"
echo ""
echo "In 10 years you will be `expr $USERAGE + 10 ` years old."
#!/bin/bash
# this script is intended to show how to do simple substitution 

shopt -s expand_aliases

alias TODAY="date"
alias UFILES="find /home -user user"


TODAYSDATE=`date`
USERFILES=`find /home -user user`


echo "Today's Date: $TODAYSDATE"
echo "All Files Owned by USER: $USERFILES"

A=`TODAY`
B=`UFILES`

echo "With Alias, TODAY is: $A"
echo "WIth Alias, UFILES is: $B"
#!/bin/bash

clear

echo " Hello world !"
#!/bin/bash
# describes Implicit vs Explicit defination of variables 
echo ""
echo "Implicit Declaration"
echo "============================================="
A=4
echo "The variable value A is : $A "
echo "performing addition(+6) on var: `expr $A + 6 ` "
echo "Type of variable A is: `declare -p A`"
echo ""
B="Nag"
echo "The Variable value B is : $B "
echo "Adding int to variable B: `expr $B + 6` "
echo "Type of variable B is : `declare -p B`"
echo ""
echo "================================================"
echo "Explicit Declaration of variables"
declare -i C=10
echo "The value of variable C is : $C"
echo "The type pf variable C is : `declare -p C`"
echo ""
echo "reassigning values to A and C"
A=string
echo "New value of A(changes 4 to Stirng) is: $A"
C=nothing
echo "New Value of C(10 to nothing which convert to int as 0)is: $C"
C=100
echo "But if we give int it will preserve that value, new value of C(100) is : $C"
echo ""
echo "we can reset the type of variable will do it to C"
declare +i C
echo "New varible type of C is(--) : `declare -p C`"
declare -r D=10
echo "The read only value of D is :`declare -p D`"
echo "we can't reset the type of readonly variable:`declare +r D`"
readonly E="NewWayof declaring readonly is: readonly var"
echo $E
E="added to readonly"




#!/bin/bash


MYUSERNAME="username"
MYPASSWORD="password123"
STARTOFSCRIPT=`date`


echo "My login name for this application is : $MYUSERNAME"
echo "My login password for this application is : $MYPASSWORD"
echo "I started this script at: $STARTOFSCRIPT"

ENDOFSCRIPT=`date`

echo  "I ended this script at :$ENDOFSCRIPT" 

